{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = this.getInitialState()){\n        // eslint-disable-next-line no-console\n        this.state = initialState;\n        this.score = 0;\n        this.status = 'idle';\n    }\n    moveLeft() {\n        this.moveInline('left');\n    }\n    moveRight() {\n        this.moveInline('right');\n    }\n    moveUp() {\n        this.moveBlock('up');\n    }\n    moveDown() {\n        this.moveBlock('down');\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.score = 0;\n        this.status = 'playing';\n        this.addRandomSell();\n        this.addRandomSell();\n    }\n    // Add your own methods here\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = 'idle';\n        this.score = 0;\n        this.state = this.getInitialState();\n    }\n    // Add your own methods here\n    moveBlock(direction) {\n        if (this.getStatus() === 'playing') {\n            let isMove = false;\n            this.state.forEach((row, rowIndex)=>{\n                const column = [];\n                row.forEach((_, cellIndex)=>{\n                    column.push(this.state[cellIndex][rowIndex]);\n                });\n                let notEmptyCells = this.getNotEmptyCells(column, direction);\n                notEmptyCells = this.mergeCells(notEmptyCells, direction);\n                for(let i = 0; i < 4; i++){\n                    this.state[i][rowIndex] = notEmptyCells[i] || 0;\n                    if (this.state[i][rowIndex] !== column[i]) isMove = true;\n                }\n            });\n            if (isMove) {\n                this.addRandomSell();\n                this.checkWinLose();\n            }\n        }\n    }\n    moveInline(direction) {\n        if (this.getStatus() === 'playing') {\n            let isMove;\n            this.state.forEach((row)=>{\n                const oldRow = [\n                    ...row\n                ];\n                let notEmptyCells = this.getNotEmptyCells(row, direction);\n                notEmptyCells = this.mergeCells(notEmptyCells, direction);\n                row.forEach((_, i)=>{\n                    row[i] = notEmptyCells[i] || 0;\n                });\n                if (!oldRow.every((cell, index)=>cell === row[index])) isMove = true;\n            });\n            if (isMove) {\n                this.addRandomSell();\n                this.checkWinLose();\n            }\n        }\n    }\n    getInitialState() {\n        return new Array(4).fill(0).map(()=>new Array(4).fill(0));\n    }\n    addRandomSell() {\n        const freeIndex = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) freeIndex.push([\n                row,\n                col\n            ]);\n        }\n        const getRandIndex = Math.floor(Math.random() * freeIndex.length);\n        const getNum = Math.random() < 0.9 ? 2 : 4;\n        const [newRow, newCol] = freeIndex[getRandIndex];\n        this.state[newRow][newCol] = getNum;\n    }\n    getNotEmptyCells(position, direction) {\n        const notEmptyCells = position.filter((cell)=>cell > 0);\n        if (direction === 'right' || direction === 'down') while(notEmptyCells.length < 4)notEmptyCells.unshift(0);\n        if (direction === 'left' || direction === 'up') while(notEmptyCells.length < 4)notEmptyCells.push(0);\n        return notEmptyCells;\n    }\n    mergeCells(cells, direction) {\n        for(let i = 0; i < cells.length - 1; i++){\n            const valueOne = cells[i];\n            const valueTwo = cells[i + 1];\n            if (valueOne === valueTwo && valueOne > 0) {\n                this.score += valueOne + valueTwo;\n                cells[i] = valueOne + valueTwo;\n                cells.splice(i + 1, 1);\n            }\n        }\n        if (direction === 'right' || direction === 'down') return this.getNotEmptyCells(cells, direction);\n        return cells;\n    }\n    hasMove() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.state[row][col];\n            if (current === 0) return true;\n            if ((row < 3 ? this.state[row + 1][col] : 0) === current) return true;\n            if ((col < 3 ? this.state[row][col + 1] : 0) === current) return true;\n        // if (current === right) {\n        //   return true;\n        // }\n        // if (current === down) {\n        //   return true;\n        // }\n        // if (down === 0 || right === 0) {\n        //   return true;\n        // }\n        }\n        return false;\n    }\n    checkWinLose() {\n        if (this.state.some((row)=>row.includes(2048))) this.status = 'win';\n        if (!this.hasMove()) this.status = 'lose';\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector('.button.start');\nconst $09e991522ca7e64e$var$messageStart = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$messageWin = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$gameScore = document.querySelector('.game-score');\nfunction $09e991522ca7e64e$var$updatedTable() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const rows = document.querySelectorAll('.field-row');\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    state.forEach((row, iRow)=>{\n        row.forEach((valueCell, iCell)=>{\n            const cell = rows[iRow].children[iCell];\n            cell.className = 'field-cell';\n            cell.textContent = '';\n            if (valueCell > 0) {\n                cell.textContent = valueCell;\n                cell.classList.add(`field-cell--${valueCell}`);\n            }\n        });\n    });\n    if ($09e991522ca7e64e$var$game.getStatus() === 'win') $09e991522ca7e64e$var$messageWin.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'lose') $09e991522ca7e64e$var$messageLose.classList.remove('hidden');\n}\n$09e991522ca7e64e$var$buttonStart.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$buttonStart.classList.remove('start');\n        $09e991522ca7e64e$var$buttonStart.classList.add('restart');\n        $09e991522ca7e64e$var$buttonStart.textContent = 'Restart';\n        $09e991522ca7e64e$var$messageStart.classList.add('hidden');\n    } else {\n        $09e991522ca7e64e$var$buttonStart.classList.remove('restart');\n        $09e991522ca7e64e$var$buttonStart.classList.add('start');\n        $09e991522ca7e64e$var$buttonStart.textContent = 'Start';\n        $09e991522ca7e64e$var$messageStart.classList.remove('hidden');\n        $09e991522ca7e64e$var$messageLose.classList.add('hidden');\n        $09e991522ca7e64e$var$messageWin.classList.add('hidden');\n        $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$updatedTable();\n});\ndocument.addEventListener('keydown', (e)=>{\n    switch(e.key){\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$updatedTable();\n});\n\n\n//# sourceMappingURL=index.e6ff1378.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst buttonStart = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\n\nfunction updatedTable() {\n  const state = game.getState();\n  const rows = document.querySelectorAll('.field-row');\n\n  gameScore.textContent = game.getScore();\n\n  state.forEach((row, iRow) => {\n    row.forEach((valueCell, iCell) => {\n      const cell = rows[iRow].children[iCell];\n\n      cell.className = 'field-cell';\n      cell.textContent = '';\n\n      if (valueCell > 0) {\n        cell.textContent = valueCell;\n        cell.classList.add(`field-cell--${valueCell}`);\n      }\n    });\n  });\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nbuttonStart.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    buttonStart.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    buttonStart.classList.remove('restart');\n    buttonStart.classList.add('start');\n    buttonStart.textContent = 'Start';\n    messageStart.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    game.restart();\n  }\n  updatedTable();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n  updatedTable();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = this.getInitialState()) {\n    // eslint-disable-next-line no-console\n    this.state = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    this.moveInline('left');\n  }\n  moveRight() {\n    this.moveInline('right');\n  }\n  moveUp() {\n    this.moveBlock('up');\n  }\n  moveDown() {\n    this.moveBlock('down');\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomSell();\n    this.addRandomSell();\n  }\n\n  // Add your own methods here\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n    this.state = this.getInitialState();\n  }\n\n  // Add your own methods here\n  moveBlock(direction) {\n    if (this.getStatus() === 'playing') {\n      let isMove = false;\n\n      this.state.forEach((row, rowIndex) => {\n        const column = [];\n\n        row.forEach((_, cellIndex) => {\n          column.push(this.state[cellIndex][rowIndex]);\n        });\n\n        let notEmptyCells = this.getNotEmptyCells(column, direction);\n\n        notEmptyCells = this.mergeCells(notEmptyCells, direction);\n\n        for (let i = 0; i < 4; i++) {\n          this.state[i][rowIndex] = notEmptyCells[i] || 0;\n\n          if (this.state[i][rowIndex] !== column[i]) {\n            isMove = true;\n          }\n        }\n      });\n\n      if (isMove) {\n        this.addRandomSell();\n        this.checkWinLose();\n      }\n    }\n  }\n\n  moveInline(direction) {\n    if (this.getStatus() === 'playing') {\n      let isMove;\n\n      this.state.forEach((row) => {\n        const oldRow = [...row];\n        let notEmptyCells = this.getNotEmptyCells(row, direction);\n\n        notEmptyCells = this.mergeCells(notEmptyCells, direction);\n\n        row.forEach((_, i) => {\n          row[i] = notEmptyCells[i] || 0;\n        });\n\n        if (!oldRow.every((cell, index) => cell === row[index])) {\n          isMove = true;\n        }\n      });\n\n      if (isMove) {\n        this.addRandomSell();\n        this.checkWinLose();\n      }\n    }\n  }\n\n  getInitialState() {\n    return new Array(4).fill(0).map(() => new Array(4).fill(0));\n  }\n\n  addRandomSell() {\n    const freeIndex = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          freeIndex.push([row, col]);\n        }\n      }\n    }\n\n    const getRandIndex = Math.floor(Math.random() * freeIndex.length);\n\n    const getNum = Math.random() < 0.9 ? 2 : 4;\n\n    const [newRow, newCol] = freeIndex[getRandIndex];\n\n    this.state[newRow][newCol] = getNum;\n  }\n\n  getNotEmptyCells(position, direction) {\n    const notEmptyCells = position.filter((cell) => cell > 0);\n\n    if (direction === 'right' || direction === 'down') {\n      while (notEmptyCells.length < 4) {\n        notEmptyCells.unshift(0);\n      }\n    }\n\n    if (direction === 'left' || direction === 'up') {\n      while (notEmptyCells.length < 4) {\n        notEmptyCells.push(0);\n      }\n    }\n\n    return notEmptyCells;\n  }\n\n  mergeCells(cells, direction) {\n    for (let i = 0; i < cells.length - 1; i++) {\n      const valueOne = cells[i];\n      const valueTwo = cells[i + 1];\n\n      if (valueOne === valueTwo && valueOne > 0) {\n        this.score += valueOne + valueTwo;\n        cells[i] = valueOne + valueTwo;\n        cells.splice(i + 1, 1);\n      }\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      return this.getNotEmptyCells(cells, direction);\n    }\n\n    return cells;\n  }\n\n  hasMove() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        if (current === 0) {\n          return true;\n        }\n\n        if ((row < 3 ? this.state[row + 1][col] : 0) === current) {\n          return true;\n        }\n\n        if ((col < 3 ? this.state[row][col + 1] : 0) === current) {\n          return true;\n        }\n        // if (current === right) {\n        //   return true;\n        // }\n\n        // if (current === down) {\n        //   return true;\n        // }\n\n        // if (down === 0 || right === 0) {\n        //   return true;\n        // }\n      }\n    }\n\n    return false;\n  }\n\n  checkWinLose() {\n    if (this.state.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n\n    if (!this.hasMove()) {\n      this.status = 'lose';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","getInitialState","state","score","status","moveLeft","moveInline","moveRight","moveUp","moveBlock","moveDown","getScore","getState","getStatus","start","addRandomSell","restart","direction","isMove","forEach","row","rowIndex","column","_","cellIndex","push","notEmptyCells","getNotEmptyCells","mergeCells","i","checkWinLose","oldRow","every","cell","index","fill","map","freeIndex","col","getRandIndex","Math","floor","random","length","getNum","newRow","newCol","position","filter","unshift","cells","valueOne","valueTwo","splice","hasMove","current","some","includes","$09e991522ca7e64e$var$buttonStart","document","querySelector","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$updatedTable","rows","querySelectorAll","textContent","iRow","valueCell","iCell","children","className","classList","add","remove","addEventListener","e","key"],"version":3,"file":"index.e6ff1378.js.map"}